{{- define "const"}}
{{- $cfg := .Config -}}
{{- $enumName := .Name -}}
const (
{{- range $ei, $item := .Items }}
    {{- if not $cfg.NoComments }}
    {{ if $item.IsBlankIdentifier }}// Skipped value.{{else}}// {{$item.GetCodeName}} is {{ IA $enumName }} of type {{$item.GetName}}.{{end}}
    {{- end}}
    {{- if $item.DocComment}}
    {{$item.DocComment}}
    {{- end}}
    {{$item.GetConstLine}} {{ if $item.LineComment}}{{$item.LineComment}}{{- end}}
{{- end}}
)

{{end -}}

{{- define "body"}}
{{- $enumName := .Name -}}

var ErrInvalid{{.Name}} = errors.New("not a valid {{.Name}}")

{{/* ---------  valid  --------- */}}
{{- $validEe := .FindExtendByName "Name" -}}
{{ if eq .Type.String "string" }}
{{ $validEe.Extend2EnumMap }}
{{ else }}
var _{{.Name}}Name = "{{- range $ei, $item := .GetItems -}}{{$item.GetName}}{{- end -}}"

{{ $validEe.Enum2ExtendMap }}
{{ end }}
func (x {{.Name}}) IsValid() bool {
    {{ if eq .Type.String "string" -}}
    _, ok := {{$validEe.Extend2EnumVarName}}[string(x)]
    {{- else -}}
	_, ok := {{$validEe.Enum2ExtendVarName}}[x]
	{{- end}}
	return ok
}

{{/* ---------  values  --------- */}}
{{ if .Config.Values }}
func {{.Name}}Values() []{{.Name}} {
    return []{{.Name}}{ {{ range $ei, $item := .GetItems }}
        {{$item.GetCodeName}},{{ end }}
    }
}
{{ end -}}

{{/* ---------  extend values  --------- */}}
{{ range $ei, $extend := .Extends -}}
{{$extend.Enum2ExtendMap}}

func (x {{$enumName}}) {{$extend.Name}}() {{$extend.Type.String}} {
    {{ if and (eq $extend.Name "Name") (eq $extend.Enum.Type.String "string") -}}
    if v, ok := {{$validEe.Extend2EnumVarName}}[string(x)]; ok {
        return string(v)
    }
    {{- else -}}
    if v, ok := {{$extend.Enum2ExtendVarName}}[x]; ok {
        return v
    }
    {{- end}}
    panic(ErrInvalid{{$enumName}})
}
{{end}}

{{/* ---------  stringer and parse  --------- */}}
{{ if .Config.StringParse }}
{{- $stringParseEe := .FindExtendByName .Config.StringParseName -}}

{{ if not (and (eq $stringParseEe.Name "Name") (eq .Type.String "string")) }}
{{ $stringParseEe.Enum2ExtendMap }}
{{ end }}

func (x {{.Name}}) String() string {
{{ if and (eq $stringParseEe.Name "Name") (eq .Type.String "string") -}}
    if v, ok := {{$stringParseEe.Extend2EnumVarName}}[string(x)]; ok {
        return string(v)
    }
    return fmt.Sprintf("{{.Name}}(%s){{$stringParseEe.Name}}", string(x))
{{- else -}}
    if v, ok := {{$stringParseEe.Enum2ExtendVarName}}[x]; ok {
        {{ if eq $stringParseEe.Type.String "string" -}}
        return v
        {{- else -}}
        return fmt.Sprintf("%v", v)
        {{- end }}
    }
    return fmt.Sprintf("{{.Name}}(%d){{$stringParseEe.Name}}", x)
{{- end}}
}

{{ $stringParseEe.Extend2EnumMap }}

func Parse{{.Name}}(value string) ({{.Name}}, error) {
{{ if eq $stringParseEe.Type.String "string" -}}
	if x, ok := {{$stringParseEe.Extend2EnumVarName}}[value]; ok {
		return x, nil
	}
	{{if .Config.NoCase -}}
    if x, ok := {{$stringParseEe.Extend2EnumVarName}}[strings.ToLower(value)]; ok {
        return x, nil
    }
    {{- end }}
{{- else -}}
    if v, err := {{ $stringParseEe.ParseNumberFuncString }}
    if err != nil {
        {{ if eq .Type.String "string" -}}
        return "", fmt.Errorf("%s is %w, %w", value, ErrInvalid{{.Name}}, err)
        {{- else -}}
        return {{.Name}}(0), fmt.Errorf("%s is %w, %w", value, ErrInvalid{{.Name}}, err)
        {{- end }}
    }
    if x, ok := {{$stringParseEe.Extend2EnumVarName}}[v]; ok {
        return x, nil
    }
{{- end}}
    {{if eq .Type.String "string" -}}
    return "", fmt.Errorf("%s is %w", value, ErrInvalid{{.Name}})
    {{- else -}}
	return {{.Name}}(0), fmt.Errorf("%s is %w", value, ErrInvalid{{.Name}})
	{{- end }}
}
{{ end }}

{{/* ---------  must parse  --------- */}}
{{ if .Config.MustParse }}
func MustParse{{.Name}}(value string) {{.Name}} {
	val, err := Parse{{.Name}}(value)
	if err != nil {
		panic(err)
	}
	return val
}
{{end}}

{{/* ---------  ptr  --------- */}}
{{ if .Config.Ptr }}
func (x {{.Name}}) Ptr() *{{.Name}} {
	return &x
}
{{end}}

{{/* ---------  marshal  --------- */}}
{{ if .Config.Marshal }}
{{ if and .Config.StringParse (eq .Config.StringParseName .Config.MarshalName) }}
func (x {{.Name}}) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

func (x *{{.Name}}) UnmarshalText(text []byte) error {
	val, err := Parse{{.Name}}(string(text))
	if err != nil {
		return err
	}
	*x = val
	return nil
}
{{- else -}}
{{- $mEe := .FindExtendByName .Config.MarshalName -}}

{{ if not (and (eq $mEe.Name "Name") (eq .Type.String "string")) }}
{{ $mEe.Enum2ExtendMap }}
{{ end }}

func (x {{.Name}}) MarshalText() ([]byte, error) {
{{ if and (eq $mEe.Name "Name") (eq .Type.String "string") -}}
    if v, ok := {{$mEe.Extend2EnumVarName}}[string(x)]; ok {
        return []byte(string(v)), nil
    }
    return nil, fmt.Sprintf("{{.Name}}(%s){{$mEe.Name}}", string(x))
{{- else -}}
    if v, ok := {{$mEe.Enum2ExtendVarName}}[x]; ok {
        {{ if eq $mEe.Type.String "string" -}}
        return []byte(v), nil
        {{- else -}}
        return []byte(fmt.Sprintf("%v", v)), nil
        {{- end }}
    }
    return nil, fmt.Sprintf("{{.Name}}(%d){{$mEe.Name}}", x)
{{- end}}
}

{{ $mEe.Extend2EnumMap }}

func (x *{{.Name}}) UnmarshalText(text []byte) error {
{{ if eq $mEe.Type.String "string" -}}
	if val, ok := {{$mEe.Extend2EnumVarName}}[string(text)]; ok {
	    *x = val
		return nil
	}
	{{ if .Config.NoCase -}}
    if val, ok := {{$mEe.Extend2EnumVarName}}[strings.ToLower(string(text))]; ok {
        *x = val
        return nil
    }
    {{- end -}}
{{- else -}}
    if v, err := {{ $mEe.ParseNumberFuncString }}
    if err != nil {
        {{ if eq .Type.String "string" }}
        return fmt.Errorf("%s is %w, %w", value, ErrInvalid{{.Name}}, err)
        {{- else -}}
        return fmt.Errorf("%s is %w, %w", value, ErrInvalid{{.Name}}, err)
        {{- end }}
    }
    if val, ok := {{$mEe.Extend2EnumVarName}}[v]; ok {
        *x = val
        return nil
    }
{{- end -}}
    {{- if eq .Type.String "string" -}}
    return fmt.Errorf("%s is %w", value, ErrInvalid{{.Name}})
    {{- else -}}
	return fmt.Errorf("%s is %w", value, ErrInvalid{{.Name}})
	{{- end }}
}
{{- end }}
{{end}}

{{end -}}

