{{- define "const"}}
{{- $cfg := .Config -}}
{{- $enumName := .Name -}}
const (
{{- range $ei, $item := .Items }}
    {{- if not $cfg.NoComments }}
    {{ if $item.IsBlankIdentifier }}// Skipped value.{{else}}// {{$item.GetCodeName}} is {{ IA $enumName }} of type {{$item.GetName}}.{{end}}
    {{- end}}
    {{- if $item.DocComment}}
    {{$item.DocComment}}
    {{- end}}
    {{$item.GetConstLine}} {{ if $item.LineComment}}{{$item.LineComment}}{{- end}}
{{- end}}
)

{{end -}}

{{- define "body"}}
{{- $enumName := .Name -}}

var ErrInvalid{{.Name}} = errors.New("not a valid {{.Name}}")

{{ if .Config.Values }}
func {{.Name}}Values() []{{.Name}} {
    return []{{.Name}}{ {{ range $ei, $item := .GetItems }}
        {{$item.GetCodeName}},{{ end }}
    }
}
{{ end -}}

{{ if ne .Type.String "string" }}
var _{{.Name}}Name = "{{- range $ei, $item := .GetItems -}}{{$item.GetName}}{{- end -}}"
{{ end }}

{{ range $ei, $extend := .Extends -}}
{{$extend.GetExtendValueMap}}

func (x {{$enumName}}) {{$extend.Name}}() {{$extend.Type.String}} {
    if result, ok := _{{$enumName}}Map{{$extend.Name}}[x]; ok {
        return result
    }
    panic(ErrInvalid{{$enumName}})
}
{{end}}

func (x {{.Name}}) IsValid() bool {
	_, ok := _{{.Name}}MapName[x]
	return ok
}

{{ if .Config.StringParse }}
{{- $ee := .FindExtendByName .Config.StringParseName -}}
{{ if $ee }}
func (x {{.Name}}) String() string {
	if str, ok := _{{.Name}}Map{{$ee.Name}}[x]; ok {
		return str
	}
	return fmt.Sprintf("{{.Name}}(%d)", x)
}

{{ $ee.GetExtendNameMap }}

func Parse{{.Name}}(name string) ({{.Name}}, error) {
	if x, ok := _{{.Name}}{{$ee.Name}}Map[name]; ok {
		return x, nil
	}{{if .Config.NoCase }}
    if x, ok := _{{.Name}}NameMap[strings.ToLower(name)]; ok {
        return x, nil
    }{{- end}}
	return {{.Name}}(0), fmt.Errorf("%s is %w", name, ErrInvalid{{.Name}})
}
{{ end }}
{{ end }}

{{ if .Config.MustParse }}
func MustParse{{.Name}}(name string) {{.Name}} {
	val, err := Parse{{.Name}}(name)
	if err != nil {
		panic(err)
	}
	return val
}
{{end}}

{{ if .Config.Ptr }}
func (x {{.Name}}) Ptr() *{{.Name}} {
	return &x
}
{{end}}

{{ if .Config.Marshal }}
func (x {{.Name}}) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

func (x *{{.Name}}) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := Parse{{.Name}}(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
{{end}}

{{end -}}

