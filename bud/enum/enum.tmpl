{{- define "const"}}
{{- $cfg := .Config -}}
{{- $enumName := .Name -}}
const (
{{- range $ei, $item := .Items }}
    {{- if not $cfg.NoComments }}
    {{ if $item.IsBlankIdentifier }}// Skipped value.{{else}}// {{$item.GetCodeName}} is {{ IA $enumName }} of type {{$item.GetName}}.{{end}}
    {{- end}}
    {{- if $item.DocComment}}
    {{$item.DocComment}}
    {{- end}}
    {{$item.GetConstLine}} {{ if $item.LineComment}}{{$item.LineComment}}{{- end}}
{{- end}}
)

{{end -}}

{{- define "body"}}
{{- $enumName := .Name -}}
{{- $validEe := .FindAttributeByName "Name" -}}

var ErrInvalid{{.Name}} = errors.New("not a valid {{.Name}}")

{{ if ne .Type.String "string" -}}
var _{{.Name}}Name = "{{- range $ei, $item := .GetItems -}}{{$item.GetName}}{{- end -}}"
{{- end}}

{{/* ---------  attributes  --------- */}}
{{ range $ai, $attr := .Attrs -}}
{{$attr.Enum2AttributeMap}}

// {{$attr.Name}} is the attribute of {{$enumName}}.
func (x {{$enumName}}) {{$attr.Name}}() {{$attr.Type.String}} {
    {{ if and (eq $attr.Name "Name") (eq $attr.Enum.Type.String "string") -}}
    if v, ok := {{$validEe.Attribute2EnumVarName}}[string(x)]; ok {
        return string(v)
    }
    {{- else -}}
    if v, ok := {{$attr.Enum2AttributeVarName}}[x]; ok {
        return v
    }
    {{- end}}
    panic(ErrInvalid{{$enumName}})
}
{{end}}

{{/* ---------  values  --------- */}}
{{ if .Config.Values }}
// {{.Name}}Values returns a list of the values of {{.Name}}
func {{.Name}}Values() []{{.Name}} {
    return []{{.Name}}{ {{ range $ei, $item := .GetItems }}
        {{$item.GetCodeName}},{{ end }}
    }
}
{{ end -}}

{{/* ---------  valid  --------- */}}
{{ if ne .Type.String "string" -}}
{{ $validEe.Enum2AttributeMap }}
{{- end }}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x {{.Name}}) IsValid() bool {
    {{ if eq .Type.String "string" -}}
    _, ok := {{$validEe.Attribute2EnumVarName}}[string(x)]
    {{- else -}}
	_, ok := {{$validEe.Enum2AttributeVarName}}[x]
	{{- end}}
	return ok
}

{{/* ---------  stringer and parse  --------- */}}
{{ if .Config.StringParse }}
{{- $stringParseEe := .FindAttributeByName .Config.StringParseName -}}

{{ if not (and (eq $stringParseEe.Name "Name") (eq .Type.String "string")) }}
{{ $stringParseEe.Enum2AttributeMap }}
{{ end }}

// String implements the Stringer interface.
func (x {{.Name}}) String() string {
{{ if and (eq $stringParseEe.Name "Name") (eq .Type.String "string") -}}
    if v, ok := {{$stringParseEe.Attribute2EnumVarName}}[string(x)]; ok {
        return string(v)
    }
    return fmt.Sprintf("{{.Name}}(%s)", string(x))
{{- else -}}
    if v, ok := {{$stringParseEe.Enum2AttributeVarName}}[x]; ok {
        {{ if eq $stringParseEe.Type.String "string" -}}
        return v
        {{- else -}}
        return fmt.Sprintf("%v", v)
        {{- end }}
    }
    return fmt.Sprintf("{{.Name}}(%d)", x)
{{- end}}
}

{{ $stringParseEe.Attribute2EnumMap }}

// Parse{{.Name}} converts a string to {{ IA .Name }}.
func Parse{{.Name}}(value string) ({{.Name}}, error) {
{{ if eq $stringParseEe.Type.String "string" -}}
	if x, ok := {{$stringParseEe.Attribute2EnumVarName}}[value]; ok {
		return x, nil
	}{{ if .Config.NoCase }}
    if x, ok := {{$stringParseEe.Attribute2EnumVarName}}[strings.ToLower(value)]; ok {
        return x, nil
    }
    {{- end }}
{{- else -}}
    if v, err := {{ $stringParseEe.ParseNumberFuncString }}
    if err != nil {
        {{ if eq .Type.String "string" -}}
        return "", fmt.Errorf("%s is %w, %w", value, ErrInvalid{{.Name}}, err)
        {{- else -}}
        return {{.Name}}(0), fmt.Errorf("%s is %w, %w", value, ErrInvalid{{.Name}}, err)
        {{- end }}
    }
    if x, ok := {{$stringParseEe.Attribute2EnumVarName}}[v]; ok {
        return x, nil
    }
{{- end }}
    {{ if eq .Type.String "string" -}}
    return "", fmt.Errorf("%s is %w", value, ErrInvalid{{.Name}})
    {{- else -}}
	return {{.Name}}(0), fmt.Errorf("%s is %w", value, ErrInvalid{{.Name}})
	{{- end }}
}
{{ end }}

{{/* ---------  must parse  --------- */}}
{{ if .Config.MustParse }}
// MustParse{{.Name}} converts a string to {{ IA .Name }}, and panics if is not valid.
func MustParse{{.Name}}(value string) {{.Name}} {
	val, err := Parse{{.Name}}(value)
	if err != nil {
		panic(err)
	}
	return val
}
{{end}}

{{/* ---------  ptr  --------- */}}
{{ if .Config.Ptr }}
func (x {{.Name}}) Ptr() *{{.Name}} {
	return &x
}
{{end}}

{{/* ---------  flag  --------- */}}
{{ if .Config.Flag }}
// Set implements the Golang flag.Value interface func.
func (x *{{.Name}}) Set(value string) error {
	v, err := Parse{{.Name}}(value)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x {{.Name}}) Get() any {
	return x
}
{{end}}

{{/* ---------  marshal  --------- */}}
{{ if .Config.Marshal }}
{{ if and .Config.StringParse (eq .Config.StringParseName .Config.MarshalName) }}
// MarshalText implements the text marshaller method.
func (x {{.Name}}) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *{{.Name}}) UnmarshalText(text []byte) error {
	val, err := Parse{{.Name}}(string(text))
	if err != nil {
		return err
	}
	*x = val
	return nil
}
{{- else -}}
{{- $mEe := .FindAttributeByName .Config.MarshalName -}}

{{ if not (and (eq $mEe.Name "Name") (eq .Type.String "string")) }}
{{ $mEe.Enum2AttributeMap }}
{{ end }}

// MarshalText implements the text marshaller method.
func (x {{.Name}}) MarshalText() ([]byte, error) {
{{ if and (eq $mEe.Name "Name") (eq .Type.String "string") -}}
    if v, ok := {{$mEe.Attribute2EnumVarName}}[string(x)]; ok {
        return []byte(string(v)), nil
    }
    return nil, fmt.Sprintf("{{.Name}}(%s){{$mEe.Name}}", string(x))
{{- else -}}
    if v, ok := {{$mEe.Enum2AttributeVarName}}[x]; ok {
        {{ if eq $mEe.Type.String "string" -}}
        return []byte(v), nil
        {{- else -}}
        return []byte(fmt.Sprintf("%v", v)), nil
        {{- end }}
    }
    return nil, fmt.Sprintf("{{.Name}}(%d){{$mEe.Name}}", x)
{{- end}}
}

{{ $mEe.Attribute2EnumMap }}

// UnmarshalText implements the text unmarshaller method.
func (x *{{.Name}}) UnmarshalText(text []byte) error {
{{ if eq $mEe.Type.String "string" -}}
	if val, ok := {{$mEe.Attribute2EnumVarName}}[string(text)]; ok {
	    *x = val
		return nil
	}
	{{ if .Config.NoCase -}}
    if val, ok := {{$mEe.Attribute2EnumVarName}}[strings.ToLower(string(text))]; ok {
        *x = val
        return nil
    }
    {{- end -}}
{{- else -}}
    if v, err := {{ $mEe.ParseNumberFuncString }}
    if err != nil {
        {{ if eq .Type.String "string" }}
        return fmt.Errorf("%s is %w, %w", value, ErrInvalid{{.Name}}, err)
        {{- else -}}
        return fmt.Errorf("%s is %w, %w", value, ErrInvalid{{.Name}}, err)
        {{- end }}
    }
    if val, ok := {{$mEe.Attribute2EnumVarName}}[v]; ok {
        *x = val
        return nil
    }
{{- end -}}
    {{- if eq .Type.String "string" -}}
    return fmt.Errorf("%s is %w", value, ErrInvalid{{.Name}})
    {{- else -}}
	return fmt.Errorf("%s is %w", value, ErrInvalid{{.Name}})
	{{- end }}
}
{{- end }}
{{end}}

{{end -}}

